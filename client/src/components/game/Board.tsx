import { createContext, For, onMount, Show } from 'solid-js';
import { Column } from './Column';
import { Stage } from '@pixi/components/Stage';
import { P } from '@pixi/renderer';
import { gsap } from 'gsap';
import { useGame } from '@contexts/GameContext';
import { TEXTURES } from '@constants/game';
import { GSAP } from '@packages/gsap';
import { useAnimation } from '@contexts/AnimationContext';
import styles from './style.module.css';

export const GameContext = createContext();

export function Board() {
  let board;
  const { state, play } = useGame();
  const { master } = useAnimation();

  // onMount(() => {
  //   gsap.fromTo(
  //     board,
  //     { alpha: 0, y: 128 },
  //     { alpha: 1, y: 64, duration: 1.5, ease: 'expo' },
  //   );
  // });

  return (
    <GSAP.div
      style={{
        height: '100vh',
        display: 'grid',
        'place-items': 'center',
      }}
      timeline={master}
      from={{ y: 128, opacity: 0, duration: 1, ease: 'expo' }}
    >
      {/* <Stage width={960 + 128} height={720 + 128} backgroundAlpha={0}>
        <P.Container position={{ x: 64, y: 64 }}>
          <For each={state.board}>
            {(column, index) => (
              <Column index={index()} state={column} x={32 + 128 * index()} />
            )}
          </For>
        </P.Container>
        <P.Sprite ref={board} x={64} texture={TEXTURES.BOARD} />
      </Stage> */}
      {/* <div class={styles.board}>
        <For each={state.board}>
          {(column, index) => (
            <div class={styles.column} onMouseDown={() => play(index())}>
              <For each={column}>
                {(token, index) => {
                  console.log(token);
                  return (
                    <div class={styles.cell}>
                      <Show when={token}>
                        <GSAP.div
                          classList={{
                            [styles.token]: true,
                            [styles.red]: token.playedBy === 0,
                            [styles.yellow]: token.playedBy === 1,
                          }}
                          from={{ y: -960, duration: 1, ease: 'bounce.out' }}
                        />
                      </Show>
                    </div>
                  );
                }}
              </For>
            </div>
          )}
        </For>
      </div> */}

      <svg width="960" height="720" viewBox="-1 -1 962 722">
        <defs>
          <clipPath id="tokens">
            <For each={[...Array(7)]}>
              {(_, i) => (
                <For each={[...Array(6)]}>
                  {(_, j) => {
                    const y = 720 - 24 - 112 / 2 - 112 * j();
                    const x = ((960 - 64) / 7) * (i() + 1) - 32;
                    return <circle cx={x} cy={y} r="50" />;
                  }}
                </For>
              )}
            </For>
          </clipPath>
        </defs>

        <rect
          width="960"
          height="720"
          stroke="currentcolor"
          stroke-width="2"
          fill="none"
          rx="32"
          ry="32"
        />

        {/* <circle cx="44" cy="44" r="44" />
        <circle cx="172" cy="44" r="44" />
        <circle cx="300" cy="44" r="44" />
        <circle cx="428" cy="44" r="44" />
        <circle cx="556" cy="44" r="44" />
        <circle cx="684" cy="44" r="44" />
        <circle cx="812" cy="44" r="44" />
        <circle cx="44" cy="380" r="44" />
        <circle cx="172" cy="380" r="44" />
        <circle cx="300" cy="380" r="44" />
        <circle cx="428" cy="380" r="44" />
        <circle cx="556" cy="380" r="44" />
        <circle cx="684" cy="380" r="44" />
        <circle cx="812" cy="380" r="44" />
        <circle cx="44" cy="156" r="44" />
        <circle cx="172" cy="156" r="44" />
        <circle cx="300" cy="156" r="44" />
        <circle cx="428" cy="156" r="44" />
        <circle cx="556" cy="156" r="44" />
        <circle cx="684" cy="156" r="44" />
        <circle cx="812" cy="156" r="44" />
        <circle cx="44" cy="492" r="44" />
        <circle cx="172" cy="492" r="44" />
        <circle cx="300" cy="492" r="44" />
        <circle cx="428" cy="492" r="44" />
        <circle cx="556" cy="492" r="44" />
        <circle cx="684" cy="492" r="44" />
        <circle cx="812" cy="492" r="44" />
        <circle cx="44" cy="268" r="44" />
        <circle cx="172" cy="268" r="44" />
        <circle cx="300" cy="268" r="44" />
        <circle cx="428" cy="268" r="44" />
        <circle cx="556" cy="268" r="44" />
        <circle cx="684" cy="268" r="44" />
        <circle cx="812" cy="268" r="44" />
        <circle cx="44" cy="604" r="44" />
        <circle cx="172" cy="604" r="44" />
        <circle cx="300" cy="604" r="44" />
        <circle cx="428" cy="604" r="44" />
        <circle cx="556" cy="604" r="44" />
        <circle cx="684" cy="604" r="44" />
        <circle cx="812" cy="604" r="44" /> */}

        <g clip-path="url(#tokens)">
          <For each={state.board}>
            {(column, idx) => (
              <>
                <rect
                  class={styles.column}
                  height={720}
                  width={(960 - 64) / 7}
                  x={((960 - 64) / 7) * idx() + 32}
                  fill="none"
                  stroke="black"
                  stroke-width="1"
                  pointer-events="all"
                  onMouseDown={() => play(idx())}
                />
                <For each={column}>
                  {(token, index) => {
                    const y = 720 - 24 - 112 / 2 - 112 * index();
                    const x = ((960 - 64) / 7) * (idx() + 1) - 32;

                    return (
                      <>
                        <Show when={token}>
                          <GSAP.circle
                            cx={x}
                            cy={y}
                            r="48"
                            fill={
                              token.playedBy === 0
                                ? 'var(--red-main)'
                                : 'var(--yellow-main)'
                            }
                            from={{ y: -960, duration: 1, ease: 'bounce.out' }}
                          />
                        </Show>

                        <circle
                          cx={x}
                          cy={y}
                          r="48"
                          fill="none"
                          stroke="black"
                          stroke-width="4"
                        />
                      </>
                    );
                  }}
                </For>
              </>
            )}
          </For>
        </g>

        {/* <defs>
          <clipPath id="board">
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M0 0H960V720H0V0ZM140 80C140 104.301 120.301 124 96 124C71.6995 124 52 104.301 52 80C52 55.6995 71.6995 36 96 36C120.301 36 140 55.6995 140 80ZM224 124C248.301 124 268 104.301 268 80C268 55.6995 248.301 36 224 36C199.699 36 180 55.6995 180 80C180 104.301 199.699 124 224 124ZM396 80C396 104.301 376.301 124 352 124C327.699 124 308 104.301 308 80C308 55.6995 327.699 36 352 36C376.301 36 396 55.6995 396 80ZM480 124C504.301 124 524 104.301 524 80C524 55.6995 504.301 36 480 36C455.699 36 436 55.6995 436 80C436 104.301 455.699 124 480 124ZM652 80C652 104.301 632.301 124 608 124C583.699 124 564 104.301 564 80C564 55.6995 583.699 36 608 36C632.301 36 652 55.6995 652 80ZM736 124C760.301 124 780 104.301 780 80C780 55.6995 760.301 36 736 36C711.699 36 692 55.6995 692 80C692 104.301 711.699 124 736 124ZM908 80C908 104.301 888.301 124 864 124C839.699 124 820 104.301 820 80C820 55.6995 839.699 36 864 36C888.301 36 908 55.6995 908 80ZM96 460C120.301 460 140 440.301 140 416C140 391.699 120.301 372 96 372C71.6995 372 52 391.699 52 416C52 440.301 71.6995 460 96 460ZM268 416C268 440.301 248.301 460 224 460C199.699 460 180 440.301 180 416C180 391.699 199.699 372 224 372C248.301 372 268 391.699 268 416ZM352 460C376.301 460 396 440.301 396 416C396 391.699 376.301 372 352 372C327.699 372 308 391.699 308 416C308 440.301 327.699 460 352 460ZM524 416C524 440.301 504.301 460 480 460C455.699 460 436 440.301 436 416C436 391.699 455.699 372 480 372C504.301 372 524 391.699 524 416ZM608 460C632.301 460 652 440.301 652 416C652 391.699 632.301 372 608 372C583.699 372 564 391.699 564 416C564 440.301 583.699 460 608 460ZM780 416C780 440.301 760.301 460 736 460C711.699 460 692 440.301 692 416C692 391.699 711.699 372 736 372C760.301 372 780 391.699 780 416ZM864 460C888.301 460 908 440.301 908 416C908 391.699 888.301 372 864 372C839.699 372 820 391.699 820 416C820 440.301 839.699 460 864 460ZM140 192C140 216.301 120.301 236 96 236C71.6995 236 52 216.301 52 192C52 167.699 71.6995 148 96 148C120.301 148 140 167.699 140 192ZM224 236C248.301 236 268 216.301 268 192C268 167.699 248.301 148 224 148C199.699 148 180 167.699 180 192C180 216.301 199.699 236 224 236ZM396 192C396 216.301 376.301 236 352 236C327.699 236 308 216.301 308 192C308 167.699 327.699 148 352 148C376.301 148 396 167.699 396 192ZM480 236C504.301 236 524 216.301 524 192C524 167.699 504.301 148 480 148C455.699 148 436 167.699 436 192C436 216.301 455.699 236 480 236ZM652 192C652 216.301 632.301 236 608 236C583.699 236 564 216.301 564 192C564 167.699 583.699 148 608 148C632.301 148 652 167.699 652 192ZM736 236C760.301 236 780 216.301 780 192C780 167.699 760.301 148 736 148C711.699 148 692 167.699 692 192C692 216.301 711.699 236 736 236ZM908 192C908 216.301 888.301 236 864 236C839.699 236 820 216.301 820 192C820 167.699 839.699 148 864 148C888.301 148 908 167.699 908 192ZM96 572C120.301 572 140 552.301 140 528C140 503.699 120.301 484 96 484C71.6995 484 52 503.699 52 528C52 552.301 71.6995 572 96 572ZM268 528C268 552.301 248.301 572 224 572C199.699 572 180 552.301 180 528C180 503.699 199.699 484 224 484C248.301 484 268 503.699 268 528ZM352 572C376.301 572 396 552.301 396 528C396 503.699 376.301 484 352 484C327.699 484 308 503.699 308 528C308 552.301 327.699 572 352 572ZM524 528C524 552.301 504.301 572 480 572C455.699 572 436 552.301 436 528C436 503.699 455.699 484 480 484C504.301 484 524 503.699 524 528ZM608 572C632.301 572 652 552.301 652 528C652 503.699 632.301 484 608 484C583.699 484 564 503.699 564 528C564 552.301 583.699 572 608 572ZM780 528C780 552.301 760.301 572 736 572C711.699 572 692 552.301 692 528C692 503.699 711.699 484 736 484C760.301 484 780 503.699 780 528ZM864 572C888.301 572 908 552.301 908 528C908 503.699 888.301 484 864 484C839.699 484 820 503.699 820 528C820 552.301 839.699 572 864 572ZM140 304C140 328.301 120.301 348 96 348C71.6995 348 52 328.301 52 304C52 279.699 71.6995 260 96 260C120.301 260 140 279.699 140 304ZM224 348C248.301 348 268 328.301 268 304C268 279.699 248.301 260 224 260C199.699 260 180 279.699 180 304C180 328.301 199.699 348 224 348ZM396 304C396 328.301 376.301 348 352 348C327.699 348 308 328.301 308 304C308 279.699 327.699 260 352 260C376.301 260 396 279.699 396 304ZM480 348C504.301 348 524 328.301 524 304C524 279.699 504.301 260 480 260C455.699 260 436 279.699 436 304C436 328.301 455.699 348 480 348ZM652 304C652 328.301 632.301 348 608 348C583.699 348 564 328.301 564 304C564 279.699 583.699 260 608 260C632.301 260 652 279.699 652 304ZM736 348C760.301 348 780 328.301 780 304C780 279.699 760.301 260 736 260C711.699 260 692 279.699 692 304C692 328.301 711.699 348 736 348ZM908 304C908 328.301 888.301 348 864 348C839.699 348 820 328.301 820 304C820 279.699 839.699 260 864 260C888.301 260 908 279.699 908 304ZM96 684C120.301 684 140 664.301 140 640C140 615.699 120.301 596 96 596C71.6995 596 52 615.699 52 640C52 664.301 71.6995 684 96 684ZM268 640C268 664.301 248.301 684 224 684C199.699 684 180 664.301 180 640C180 615.699 199.699 596 224 596C248.301 596 268 615.699 268 640ZM352 684C376.301 684 396 664.301 396 640C396 615.699 376.301 596 352 596C327.699 596 308 615.699 308 640C308 664.301 327.699 684 352 684ZM524 640C524 664.301 504.301 684 480 684C455.699 684 436 664.301 436 640C436 615.699 455.699 596 480 596C504.301 596 524 615.699 524 640ZM608 684C632.301 684 652 664.301 652 640C652 615.699 632.301 596 608 596C583.699 596 564 615.699 564 640C564 664.301 583.699 684 608 684ZM780 640C780 664.301 760.301 684 736 684C711.699 684 692 664.301 692 640C692 615.699 711.699 596 736 596C760.301 596 780 615.699 780 640ZM864 684C888.301 684 908 664.301 908 640C908 615.699 888.301 596 864 596C839.699 596 820 615.699 820 640C820 664.301 839.699 684 864 684Z"
            />
          </clipPath>
        </defs> */}
      </svg>
    </GSAP.div>
  );
}
